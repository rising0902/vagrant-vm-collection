---
# gitlab

- name: retrieve new lists of packages
  apt: update_cache=yes

- name: set as default vim editor
  alternatives: name=editor path=/usr/bin/vim.basic

- name: install package
  apt: name={{ item }} state=present
  with_items:
    - build-essential
    - zlib1g-dev
    - libyaml-dev
    - libssl-dev
    - libgdbm-dev
    - libreadline-dev
    - libncurses5-dev
    - libffi-dev
    - curl
    - openssh-server
    - checkinstall
    - libxml2-dev
    - libxslt-dev
    - libcurl4-openssl-dev
    - libicu-dev
    - logrotate
    - python-docutils
    - pkg-config
    - cmake
    - nodejs

- name: install git-core
  apt: name=git-core state=present

- name: check ruby
  stat: path=/usr/local/bin/ruby
  register: ruby_stat

- name: download ruby source
  get_url: url=https://cache.ruby-lang.org/pub/ruby/2.1/ruby-2.1.8.tar.gz dest=/usr/local/src
  when: ruby_stat.stat.md5 is not defined

- name: unarchive
  unarchive: src=/usr/local/src/ruby-2.1.8.tar.gz dest=/usr/local/src creates=/usr/local/src/ruby-2.1.8 copy=no
  when: ruby_stat.stat.md5 is not defined

- name: build ruby
  shell: >
    ./configure --disable-install-rdoc --with-opt-dir=/usr/local --enable-shared --enable-option-checking &&
    make &&
    make install
    chdir=/usr/local/src/ruby-2.1.8
    creates=/usr/local/bin/ruby
  when: ruby_stat.stat.md5 is not defined

- name: modify path environment on sudo
  replace: >
    dest=/etc/sudoers
    regexp="^Defaults    secure_path = /sbin:/bin:/usr/sbin:/usr/bin$"
    replace="Defaults    secure_path = /sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin"
  when: ruby_stat.stat.md5 is not defined

- name: install bundler
  gem: name=bundler state=present user_install=no

- name: check go
  stat: path=/usr/local/bin/go
  register: go_stat

- name: download go source
  get_url: url=https://storage.googleapis.com/golang/go1.5.3.linux-amd64.tar.gz dest=/usr/local/src
  when: go_stat.stat.md5 is not defined

- name: unarchive go
  unarchive: src=/usr/local/src/go1.5.3.linux-amd64.tar.gz dest=/usr/local creates=/usr/local/go copy=no
  when: go_stat.stat.md5 is not defined

- name: build go
  file: src=/usr/local/go/bin/{{ item }} dest=/usr/local/bin/{{ item }} state=link
  with_items:
    - go
    - godoc
    - gofmt
  when: go_stat.stat.md5 is not defined

- name: create user
  user: name=git system=yes comment=GitLab

- name: install postgresql
  apt: name={{ item }} state=present
  with_items:
    - postgresql
    - postgresql-client
    - libpq-dev
    - python-psycopg2

- name: create postgresql user
  postgresql_user: name=git role_attr_flags=CREATEDB
  sudo_user: postgres

- name: create database
  postgresql_db: name=gitlabhq_production encoding='UTF-8' owner=git state=present
  sudo_user: postgres

- name: install redis
  apt: name=redis-server state=present

- name: disable redis listening on TCP
  replace: dest=/etc/redis/redis.conf regexp='^port .*' replace='port 0' backup=yes

- name: enable redis socket
  lineinfile: dest=/etc/redis/redis.conf line='unixsocket /var/run/redis/redis.sock'

- name: grant permission to the socket to all members of the redis group
  lineinfile: dest=/etc/redis/redis.conf line='unixsocketperm 770'

- name: create the directory which contains the socket
  file: path=/var/run/redis state=directory owner=redis group=redis mode=0755

- name: create the directory which contains the socket
  file: path=/etc/tmpfiles.d state=directory owner=root group=root mode=0755

- name: copy redis.conf
  copy: src=redis.conf dest=/etc/tmpfiles.d/redis.conf

- name: activate the change to redis.conf
  service: name=redis-server state=restarted

- name: add git to the redis group
  user: name=git groups=redis

- name: clone gitlab
  git: repo=https://gitlab.com/gitlab-org/gitlab-ce.git
       dest=/home/git/gitlab
       version=8-5-stable
  sudo_user: git

- name: create gitlab.yml
  shell: creates=/home/git/gitlab/config/gitlab.yml cp /home/git/gitlab/config/gitlab.yml.example /home/git/gitlab/config/gitlab.yml

- name: modify mode
  file: path=/home/git/gitlab/config/gitlab.yml owner=git group=git mode=0644

- name: create secrets.yml
  shell: creates=/home/git/gitlab/config/secrets.yml cp /home/git/gitlab/config/secrets.yml.example /home/git/gitlab/config/secrets.yml

- name: modify mode
  file: path=/home/git/gitlab/config/secrets.yml owner=git group=git mode=0600

- name: create public/uploads
  file: path=/home/git/gitlab/public/uploads state=directory owner=git group=git mode=0700

- name: create config/unicorn.rb
  shell: creates=/home/git/gitlab/config/unicorn.rb cp /home/git/gitlab/config/unicorn.rb.example /home/git/gitlab/config/unicorn.rb

- name: create config/initializers/rack_attack.rb
  shell: creates=/home/git/gitlab/config/initializers/rack_attack.rb cp /home/git/gitlab/config/initializers/rack_attack.rb.example /home/git/gitlab/config/initializers/rack_attack.rb

- name: git config
  action: command git config --global core.autocrlf input
  sudo_user: git

- name: create config/resque.yml
  shell: creates=/home/git/gitlab/config/resque.yml cp /home/git/gitlab/config/resque.yml.example /home/git/gitlab/config/resque.yml

- name: create config/database.yml
  shell: creates=/home/git/gitlab/config/database.yml cp /home/git/gitlab/config/database.yml.postgresql /home/git/gitlab/config/database.yml

- name: check
  shell: chdir=/home/git/gitlab bundle check
  register: result
  sudo_user: git

- name: install gems
  shell: chdir=/home/git/gitlab bundle install --deployment --without development test mysql aws kerberos
  sudo_user: git
  when: result|failed

- name: install gitLab shell
  shell: chdir=/home/git/gitlab bundle exec rake gitlab:shell:install REDIS_URL=unix:/var/run/redis/redis.sock RAILS_ENV=production
  sudo_user: git

- name: install gitlab-workhorse
  git: repo=https://gitlab.com/gitlab-org/gitlab-workhorse.git
       dest=/home/git/gitlab-workhorse
       version=0.6.5
  sudo_user: git

- name: make
  shell: chdir=/home/git/gitlab-workhorse make
  sudo_user: git

- name: initialize database
  shell: chdir=/home/git/gitlab bundle exec rake gitlab:setup RAILS_ENV=production GITLAB_ROOT_PASSWORD=gitlab GITLAB_ROOT_EMAIL=gitlab@test.com
  sudo_user: git

